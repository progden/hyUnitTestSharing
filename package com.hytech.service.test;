package com.hytech.service.test;

import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.dbunit.DBTestCase;
import org.dbunit.DataSourceDatabaseTester;
import org.dbunit.IDatabaseTester;
import org.dbunit.IOperationListener;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.DataSetException;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import com.hytech.config.MvcConfiguration;
import com.hytech.dao.IssueMapper;
import com.hytech.model.Issue;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = MvcConfiguration.class)
public class TestIssueService_DBUnit extends DBTestCase {
	@Autowired
	private static DataSource dataSource;

	@Autowired
	private SqlSessionFactory sessionFactory;

	@Autowired
	private IssueMapper issueMapper;

	private IDatabaseConnection connection;

	private static IDatabaseTester databaseTester;

	IDataSet dataSet = null;

	
	@Override
	protected IDataSet getDataSet() throws Exception {
		// 測試前讀入初始資料集合、清除表格並將初始資料集合新增至資料庫中的表格
		FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();
		dataSet = builder.build(new ClassPathResource("/dataSet.xml")
				.getInputStream());
		
		return dataSet;
	}

	@Override
	protected DatabaseOperation getSetUpOperation() throws Exception {
		return super.getSetUpOperation(); // CLEAN_INSERT
	}

	@Override
	protected DatabaseOperation getTearDownOperation() throws Exception {
		return super.getTearDownOperation(); // NONE
	}

	@Before
	public void init() throws Exception {
		// 建立連線
		connection = new DatabaseConnection(
				DataSourceUtils.getConnection(dataSource));

		
//		databaseTester = new DataSourceDatabaseTester(dataSource);
//		databaseTester.setOperationListener(new IOperationListener() {
//			
//			@Override
//			public void operationTearDownFinished(IDatabaseConnection connection) {
//				System.out.println("TearDownFinished!");
//			}
//			
//			@Override
//			public void operationSetUpFinished(IDatabaseConnection connection) {
//				System.out.println("SetupFinished!");
//			}
//			
//			@Override
//			public void connectionRetrieved(IDatabaseConnection connection) {
//				System.out.println("Retrieved!");
//			}
//		});
//		
//		databaseTester.setDataSet(dataSet);
//		databaseTester.onSetup();
	}

	@After
	public void tearDownClass() throws Exception {
//		databaseTester.onTearDown();
		connection.close();
	}

	@Test
	public void testGetAllIssue() throws DataSetException, SQLException {
		List<Issue> result = issueMapper.selectAll();

		assertEquals(3, result.size());
	}

	@Test
	public void testGetIssue() {
		Issue resultId1 = issueMapper.selectByPrimaryKey(1);
		Issue resultId2 = issueMapper.selectByPrimaryKey(2);
		Issue resultId3 = issueMapper.selectByPrimaryKey(3);
		Issue resultId4 = issueMapper.selectByPrimaryKey(4);

		assertEquals("1", String.valueOf(resultId1.getId()));
		assertEquals("2", String.valueOf(resultId2.getId()));
		assertEquals("3", String.valueOf(resultId3.getId()));
		assertNull(resultId4);
	}

	// @Test
	// public void test() {
	// issueMapper.insert(record);
	// }

}
